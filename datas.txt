[{"id":0,"position":12,"title":"CSS Rules","subtitle":"Ellisreterte","language":"2","snippet":"Selector :\n\n. class\n# id\n\n:last-child / . first-child\n\nntr-child(even / odd)\n\n","lastEdit":"Thu Jan 01 1970 00:00:00 GMT+0100 (Paris, Madrid)","saved":true},{"id":1,"position":13,"title":"Servlet use","subtitle":"How to","language":"1","snippet":"@Override\npublic void doGet(...) {\n  //Récupération dans l'objet request des paramètres permettant\n  //de déterminer l'action à réaliser\n  String forward;\n  if (action1)\n    forward = action1();\n  else if (action2)\n    forward = action2();\n    else if ...\n    else\n    //Pages est une classe contenant uniquement des String public static final qui sont le nom\n    //de toutes les pages de l'application\n    forward = Pages.errorPage;\n    request.getRequestDispatcher().forward(request,response);\n    }\n\n//Prend en général request et/ou response en paramètre\nprivate String action1(...) {\n  //code...\n  return Pages.unePage1;\n}\n\nprivate String action2(...) {\n  //code...\n  return Pages.unePage2;\n}","lastEdit":"Thu Jan 01 1970 00:00:00 GMT+0100 (Paris, Madrid)","saved":true},{"id":2,"position":6,"title":"SQL CREATE","subtitle":"AFPA exemple","language":"4","snippet":"CREATE TABLE MACHINE (\n  Libelle varchar(250) PRIMARY KEY,\n  Actif bit NOT NULL DEFAULT '1' \n)\n\nCREATE TABLE MODELE (\n  Modele varchar(250) PRIMARY KEY,\n  Diametre Float NOT NULL CHECK (Diametre>0 ),\n  Actif bit  NOT NULL DEFAULT '1' \n)\n\nCREATE TABLE CATEGORIE(\n  Categorie varchar(250) PRIMARY KEY,\n  Tolerance_mini float,\n  Tolerance_maxi float,\n)\n\nCREATE TABLE STOCK (\n  Modele varchar(250) NOT NULL REFERENCES MODELE(Modele),\n  Categorie varchar(250) NOT NULL REFERENCES CATEGORIE(Categorie),\n  Qt_stock int NOT NULL,\n  Seuil_mini int NOT NULL\n)\n\nCREATE TABLE ETAT(\n  Etat varchar(250) PRIMARY KEY\n)\n\nCREATE TABLE LOT(\n  Num_lot int PRIMARY KEY IDENTITY(1, 1),\n  Nb_pieces_demandees int NOT NULL,\n  Date_fabrication datetime,\n  Etat_lot varchar(250) NOT NULL REFERENCES ETAT(Etat),\n  Libelle_presse varchar(250)REFERENCES MACHINE(Libelle),\n  Modele varchar(250) NOT NULL REFERENCES MODELE(Modele),\n  Moyenne_HL Float,\n  Moyenne_HT Float,\n  Moyenne_BL Float,\n  Moyenne_BT Float,\n  Maximum_HL Float,\n  Maximum_HT Float,\n  Maximum_BL Float,\n  Maximum_BT Float,\n  Minimum_HL Float,\n  Minimum_HT Float,\n  Minimum_BL Float,\n  Minimum_BT Float,\n  EcartType_HL Float,\n  EcartType_HT Float,\n  EcartType_BL Float,\n  EcartType_BT Float,\n)\n\nCREATE TABLE CUMUL(\n  Num_lot int REFERENCES LOT(Num_lot),\n  Categorie varchar(250)  NOT NULL REFERENCES CATEGORIE (Categorie),\n  Nb_pieces int NOT NULL\n)\n\nCREATE TABLE PIECE(\n  Num_piece int PRIMARY KEY IDENTITY(1,1),\n  Num_lot int NOT NULL REFERENCES LOT(Num_lot),\n  Categorie varchar(250)  NOT NULL REFERENCES CATEGORIE(Categorie),\n  Diametre_HL Float,\n  Diametre_HT Float,\n  Diametre_BL Float,\n  Diametre_BT Float\n)","lastEdit":"Thu Jan 01 1970 00:00:00 GMT+0100 (Paris, Madrid)","saved":true},{"id":3,"position":4,"title":"Conn SQL Server","subtitle":"exemple de connection sql","language":"1","snippet":"//Varibles SQL\nprivate String serverName = \"serveur-sql2008;\";\nprivate String dataBasename = \"mfcat\";\nprivate String url = \"jdbc:sqlserver://\" + serverName + \"; databaseName = \" + dataBasename;\nprivate String login = \"visiteur\";\nprivate String password = \"visiteur\";\n\npublic static ConnectionSQL getInstance() throws Exception {\n\n  if (connectionSQL == null) {\n    connectionSQL = new ConnectionSQL();\n  }\n  return connectionSQL;\n}\n\nprivate ConnectionSQL() throws Exception {\n  Class.forName(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\");\n  connection = java.sql.DriverManager.getConnection(url, login, password);\n}","lastEdit":"Thu Jan 01 1970 00:00:00 GMT+0100 (Paris, Madrid)","saved":false},{"id":4,"position":4,"title":"SQL INSERT","subtitle":"id : 4","language":"4","snippet":"INSERT INTO CATEGORIE (Categorie,Tolerance_mini,Tolerance_maxi) VALUES ('GROS', '0.01', '0.1')\nGO\nINSERT INTO CATEGORIE (Categorie,Tolerance_mini,Tolerance_maxi) VALUES ('MOYEN', '-0.05', '0.05')\nGO\nINSERT INTO CATEGORIE (Categorie,Tolerance_mini,Tolerance_maxi) VALUES ('PETIT', '-0.1', '-0.01')\nGO\nINSERT INTO CATEGORIE (Categorie,Tolerance_mini,Tolerance_maxi) VALUES ('REBUT', NULL, NULL )\nGO\n\nINSERT INTO ETAT (Etat) VALUES ('Lance')\nGO\nINSERT INTO ETAT (Etat) VALUES ('Demarre')\nGO\nINSERT INTO ETAT (Etat) VALUES ('Libere')\nGO\nINSERT INTO ETAT (Etat) VALUES ('Arrete')\nGO\n\nUSE Boum\nGO","lastEdit":"Thu Jan 01 1970 00:00:00 GMT+0100 (Paris, Madrid)","saved":false},{"id":5,"position":5,"title":"SQL TRIGGER","subtitle":"id : 5","language":"4","snippet":"--====================================================--\n--Description :\n--\tTrigger INSERT table LOT\n\n-- Initialise la table cumul pour son lot\n--====================================================--\n\nCREATE TRIGGER INTERNE_TRIGGER_INSERT_LOT\nON LOT\nFOR INSERT\nAS\n\n-- Initialise la table cumul pour son lot\nDeclare @numeroDeLotInsere int;\nSELECT @numeroDeLotInsere=Num_lot FROM inserted\n\nINSERT INTO CUMUL (Num_lot, Categorie, Nb_pieces) \nVALUES (@numeroDeLotInsere,'GROS',0);\n\nINSERT INTO CUMUL (Num_lot, Categorie,Nb_pieces) \nVALUES (@numeroDeLotInsere,'MOYEN',0);\n\nINSERT INTO CUMUL (Num_lot, Categorie,Nb_pieces) \nVALUES (@numeroDeLotInsere,'PETIT',0);\n\nINSERT INTO CUMUL (Num_lot, Categorie,Nb_pieces) \nVALUES (@numeroDeLotInsere,'REBUT',0);\n\nGO","lastEdit":"Thu Jan 01 1970 00:00:00 GMT+0100 (Paris, Madrid)","saved":false},{"id":6,"position":6,"title":"Transaction SQL","subtitle":"transaction avec rollback et commit + try catch + test + drop","language":"4","snippet":"USE Boum\ngo\nSET TRANSACTION ISOLATION LEVEL SERIALIZABLE\ngo\n\n--====================================================--\n--Description :\n--\tProcédure fin de lot le met à \"arrèté\" quand il est libéré\n--  calcul les moyennes, minimums, maximums et écart-types des\n--  champs de la table LOT et met à jour la table CUMUL avec \n--  le nombre de pièces\n--\n--Retour :\t-9 : erreur BDD (try catch)\n--\t\t\t-1 : un paramètre possède une valeur nulle\n--\t\t\t-2 : Le lot n'est pas liberé ou n'existe pas.\n--\t\t\t 0 : OK\n--\n--====================================================--\n\nCREATE PROCEDURE CONTROLEUR_finDeLot\n@numeroDuLot int, \n\n@message  varchar(250) OUTPUT\nAS\n\nDeclare @codeRetour int\nDeclare @nbPieces int\n\n--1er CONTROLE, hors transaction pour verifier que les paramètre ne sont pas nuls\n\nif @numeroDuLot is Null OR @numeroDuLot='' OR @numeroDuLot <=0\nbegin\nset @message = '@numeroDuLot est null ou vide ou négatif'\nset @codeRetour = -1\nend\nelse\nbegin\n\nbegin try\nBEGIN TRANSACTION\n--Mise en place des verrous de table exclusifs\nSELECT TOP 1 * \nFROM LOT, PIECE, CUMUL\nWith (HOLDLOCK TABLOCKX)\n\n--Vérifie l'état du lot à \"arrete\"\nif EXISTS(SELECT Num_lot FROM LOT WHERE @numeroDuLot =Num_lot AND Etat_lot ='Libere')\n--==== DO ACTION ====--                                            \nbegin\n--Change état du lot de \"lancé\" à \"arrèté\"--\nUPDATE LOT SET Etat_lot = 'Arrete' WHERE Etat_lot = 'Libere' AND @numeroDuLot =Num_lot;\nset @message = 'OK';\nset @codeRetour = 0\nCOMMIT\nend\n--==== DO ACTION ====--\nelse\nbegin \nset @message = 'Le lot n''est pas liberé ou n''existe pas';\nset @codeRetour = -2\nROLLBACK\nend\nend try\t\t\t\t\t\t\t\t\n-------------------------------------------------------------------\nbegin catch\n-- 2eme CONTROLE, hors transaction - catch (erreur BBD)\nset @message = 'Erreur BDD : ' + ERROR_MESSAGE();\nset @codeRetour = -9\nROLLBACK\nend catch\n-------------------------------------------------------------------\nend\nreturn @codeRetour\ngo      \n\n--====================================================--\n--Execution :\n--\tTest d'execution\n--ATTENTION SI LA PROCéDURE RETOURNE UNE VALEUR ELLE N'EST PAS TRAITEE PAR DEFAUT\n--====================================================--\n\ngo\n\nDeclare @message varchar(250)\nDeclare @codeRetour int\n\nPRINT '--------------Excecution de la procédure stockée------------------'\nEXECUTE @codeRetour = CONTROLEUR_finDeLot '1', @message OUTPUT\nPRINT '--------------Procédure stockée executée--------------------------'\nPRINT 'Code de retour : ' + CONVERT(varchar(250), @codeRetour)\nPRINT 'Message retour : ' + @message\n\ngo\nDROP PROCEDURE CONTROLEUR_finDeLot\t\t","lastEdit":"Thu Jan 01 1970 00:00:00 GMT+0100 (Paris, Madrid)","saved":false},{"id":7,"position":7,"title":"Exemple HTML","subtitle":"easy","language":"3","snippet":"<table>\n  <tr>\n    <td>Référence</td>\n    <td>Prix</td>\n    <td>Quantité</td>\n    <td>Photo</td>\n    <td>Titre</td>\n    <td>Auteur</td>\n    <td>Editeur</td>\n    <td>Année</td>\n    <td>Seuil</td>\n    <td>Genre</td>\n  </tr>\n","lastEdit":"Thu Jan 01 1970 00:00:00 GMT+0100 (Paris, Madrid)","saved":false},{"id":8,"position":8,"title":"J2EE","subtitle":"exemples","language":"1","snippet":"BLA BLA BLA","lastEdit":"Thu Jan 01 1970 00:00:00 GMT+0100 (Paris, Madrid)","saved":false}]